// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEMO
  REGULAR
  MENTOR
  ADMIN
}

enum HandleType {
  CODEFORCES
  CODECHEF
}

enum Verdict {
  AC
  PS
  WA
  TLE
  MLE
  RE
  CE
  SK
  OTH
  HCK
}

model User {
  id String @id @default(uuid())

  fullName  String   @map("full_name")
  email     String   @unique
  username  String   @unique
  password  String
  phone     String?
  role      Role     @default(REGULAR)
  lastSeen  DateTime @default(now()) @map("last_seen") @db.Timestamp(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  metaData  Json?    @default("{}") @map("metadata")

  institutionId String?
  institution   Institution? @relation(fields: [institutionId], references: [id])

  submissions   Submission[]
  userHandles   UserHandle[]
  pullHistories RetrieveHistory[]
  userStudies   UserStudy[]

  @@map("users")
}

model Problem {
  id String @id @default(uuid())

  pid         String       @unique
  name        String
  url         String       @unique
  difficulty  Int
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.Timestamp(0)
  metaData    Json?        @default("{}") @map("metadata")
  problemTags ProblemTag[]
  submissions Submission[]

  @@map("problems")
}

model ProblemTag {
  problemId String  @map("problem_id")
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  tagId String @map("tag_id")
  tag   Tag    @relation(fields: [tagId], references: [id])

  @@id([problemId, tagId])
  @@map("problem_tags")
}

model Institution {
  id String @id @default(uuid())

  name        String
  url         String?
  country     String?
  countryCode String? @map("country_code")
  users       User[]

  @@map("institutions")
}

model Tag {
  id String @id @default(uuid())

  name          String         @unique
  problemTags   ProblemTag[]
  userStudyTags UserStudyTag[]

  @@map("tags")
}

model Submission {
  id String @id @default(uuid())

  solveTime  Int      @map("solve_time")
  verdict    Verdict
  solvedAt   DateTime @map("solved_at") @db.Date
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  userId     String   @map("user_id")
  problemId  String   @map("problem_id")
  isVerified Boolean  @default(false) @map("is_verified")

  acCount  Int @default(0) @map("ac_count") // AC - Accepted
  psCount  Int @default(0) @map("ps_count") // PS - Partially solved
  waCount  Int @default(0) @map("wa_count") // WA - Wrong answer
  tleCount Int @default(0) @map("tle_count") // TLE - Time limit exceeded
  mleCount Int @default(0) @map("mle_count") // MLE - Memory limit exceeded
  reCount  Int @default(0) @map("re_count") // RE - Runtime error
  ceCount  Int @default(0) @map("ce_count") // CE - Compile error
  skCount  Int @default(0) @map("sk_count") // SK - Skipped
  hckCount Int @default(0) @map("hck_count") // HCK - Hacked
  othCount Int @default(0) @map("oth_count") // OTH - Others

  metaData Json? @default("{}") @map("metadata")

  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@unique([userId, problemId])
  @@index(solvedAt)
  @@map("submissions")
}

model UserHandle {
  id String @id @default(uuid())

  user   User       @relation(fields: [userId], references: [id])
  userId String     @map("user_id")
  type   HandleType
  handle String

  @@unique([userId, type])
  @@map("user_handles")
}

enum RetrieveStatusEnum {
  PENDING // the pull history has been created
  STARTED // the job is started, totalItems is available
  PULLED // all items has been pulled
  ERROR // failed
}

model RetrieveHistory {
  id String @id @default(uuid())

  user           User               @relation(fields: [userId], references: [id])
  userId         String             @map("user_id")
  status         RetrieveStatusEnum @default(PENDING)
  totalCompleted Int                @default(0) @map("total_completed")
  totalItems     Int                @default(0) @map("total_items")
  items          Json?              @default("[]")
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime           @updatedAt @map("updated_at") @db.Timestamp(0)
  processingTime BigInt             @default(0) @map("processing_time")

  @@map("pull_histories")
}

enum StudyTypeEnum {
  ARTICLE
  VIDEO
  OTHER
}

enum StudyDifficultyEnum {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum StudyLanguageEnum {
  BENGALI
  ENGLISH
  HINDI
}

model UserStudy {
  id String @id @default(uuid())

  title         String
  resourceLink  String              @map("resource_link")
  type          StudyTypeEnum
  difficulty    StudyDifficultyEnum
  language      StudyLanguageEnum
  duration      Int
  studyDate     DateTime            @map("study_date") @db.Date
  notes         String
  metaData      Json?               @default("{}") @map("metadata")
  user          User                @relation(fields: [userId], references: [id])
  userId        String              @map("user_id")
  userStudyTags UserStudyTag[]

  @@map("user_studies")
}

model UserStudyTag {
  userStudy   UserStudy @relation(fields: [userStudyId], references: [id], onDelete: Cascade)
  userStudyId String    @map("user_study_id")

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String @map("tag_id")

  @@id([userStudyId, tagId])
  @@map("user_study_tags")
}
