// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  username    String       @unique
  password    String
  mobile      String?
  department  String?
  batch       Int?
  section     String?
  cgpa        Float?
  role        Role         @default(USER)
  memberSince DateTime     @default(now())
  submissions Submission[]
  userStat    UserStat?
  groups      UserGroup[]
  studies     UserStudy[]
  handles     Handle[]

  @@index(username)
}

model OnlineJudge {
  id       Int       @id @default(autoincrement())
  name     String
  problems Problem[]
  handles  Handle[]
}

model Tag {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  problems ProblemTag[]
}

model Problem {
  id            Int           @id @default(autoincrement())
  pid           String        @unique
  name          String
  link          String        @unique
  difficulty    Int
  createdAt     DateTime      @default(now())
  submissions   Submission[]
  tags          ProblemTag[]
  onlineJudge   OnlineJudge   @relation(fields: [onlineJudgeId], references: [id])
  onlineJudgeId Int
  ListProblem   ListProblem[]
}

model Submission {
  id        Int      @id @default(autoincrement())
  solveTime Int
  verdict   Verdict
  solvedAt  DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int

  @@index(problemId)
  @@index(userId)
  @@index(solvedAt)
}

model ProblemTag {
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int

  @@id([problemId, tagId])
}

model UserStat {
  id                        Int  @id @default(autoincrement())
  user                      User @relation(fields: [userId], references: [id])
  userId                    Int  @unique
  totalSolveTime            Int  @default(0)
  totalDifficulty           Int  @default(0)
  totalSolved               Int  @default(0)
  totalSolvedWithDifficulty Int  @default(0)
}

model UserStudy {
  id         Int      @id @default(autoincrement())
  title      String
  link       String   @unique
  type       String
  difficulty String
  studyTime  Int
  studyDate  DateTime
  language   String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Handle {
  id            Int         @id @default(autoincrement())
  handle        String
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  onlineJudge   OnlineJudge @relation(fields: [onlineJudgeId], references: [id])
  onlineJudgeId Int
}

model Group {
  id         Int         @id @default(autoincrement())
  name       String
  slug       String      @unique
  accessCode String
  createdAt  DateTime    @default(now())
  users      UserGroup[]
  private    Boolean     @default(false)
  List       List[]

  @@index(accessCode)
}

model UserGroup {
  id      Int       @id @default(autoincrement())
  group   Group     @relation(fields: [groupId], references: [id])
  groupId Int
  user    User      @relation(fields: [userId], references: [id])
  userId  Int
  role    GroupRole @default(MEMBER)

  @@index(userId)
  @@index(groupId)
}

model List {
  id          Int           @id @default(autoincrement())
  name        String
  group       Group?        @relation(fields: [groupId], references: [id])
  groupId     Int?
  problems    ListProblem[]
  collections Collection[]
}

model Collection {
  id       Int           @id @default(autoincrement())
  name     String
  list     List          @relation(fields: [listId], references: [id])
  listId   Int
  order    Int           @default(autoincrement())
  metaData Json?         @default("{}")
  problems ListProblem[]
}

model ListProblem {
  id           Int         @id @default(autoincrement())
  order        Int         @default(autoincrement())
  list         List        @relation(fields: [listId], references: [id])
  listId       Int
  problem      Problem     @relation(fields: [problemId], references: [id])
  problemId    Int
  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId Int?

  @@index([listId, problemId, collectionId])
}

enum GroupRole {
  ADMIN
  MEMBER
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum Verdict {
  AC
  WA
  TLE
}
