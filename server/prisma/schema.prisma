// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = "postgresql://user:pass@localhost:5432/app"
  url         = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  username    String       @unique
  password    String
  mobile      String?
  department  String?
  batch       Int?
  section     String?
  cgpa        Float?
  role        Role         @default(USER)
  memberSince DateTime     @default(now())

  submissions Submission[]
  userStat    UserStat?
  groups      UserGroup[]
  studies     UserStudy[]
  handles     Handle[]

  judgeContestAuthors  JudgeContests[]  
  judgeProblemAurhor JudgeProblems[]
  judgeProblemSolution JudgeProblemSolutions[]
  judgeSubmissions JudgeSubmissions[]

  @@index(username)
}

model OnlineJudge {
  id       Int       @id @default(autoincrement())
  name     String
  problems Problem[]
  handles  Handle[]
}

model Tag {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  problems ProblemTag[]
  judgeProblems JudgeProblems[]
}

model Problem {
  id            Int          @id @default(autoincrement())
  pid           String       @unique
  name          String
  link          String       @unique
  difficulty    Int
  createdAt     DateTime     @default(now())
  submissions   Submission[]
  tags          ProblemTag[]
  onlineJudge   OnlineJudge  @relation(fields: [onlineJudgeId], references: [id])
  onlineJudgeId Int
}

model Submission {
  id        Int      @id @default(autoincrement())
  solveTime Int
  verdict   Verdict
  solvedAt  DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int

  @@index(problemId)
  @@index(userId)
  @@index(solvedAt)
}

model ProblemTag {
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int

  @@id([problemId, tagId])
}

model UserStat {
  id                        Int  @id @default(autoincrement())
  user                      User @relation(fields: [userId], references: [id])
  userId                    Int  @unique
  totalSolveTime            Int  @default(0)
  totalDifficulty           Int  @default(0)
  totalSolved               Int  @default(0)
  totalSolvedWithDifficulty Int  @default(0)
}

model UserStudy {
  id         Int      @id @default(autoincrement())
  title      String
  link       String   @unique
  type       String
  difficulty String
  studyTime  Int
  studyDate  DateTime
  language   String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Handle {
  id            Int         @id @default(autoincrement())
  handle        String
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  onlineJudge   OnlineJudge @relation(fields: [onlineJudgeId], references: [id])
  onlineJudgeId Int
}

model Group {
  id         Int         @id @default(autoincrement())
  name       String
  hashtag    String      @unique
  accessCode String
  createdAt  DateTime    @default(now())
  users      UserGroup[]
  private    Boolean     @default(false)

  @@index(accessCode)
}

model UserGroup {
  id      Int       @id @default(autoincrement())
  group   Group     @relation(fields: [groupId], references: [id])
  groupId Int
  user    User      @relation(fields: [userId], references: [id])
  userId  Int
  role    GroupRole @default(MEMBER)

  @@index(userId)
  @@index(groupId)
}

enum GroupRole {
  ADMIN
  MEMBER
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum Verdict {
  AC
  WA
  TLE
  RE
}


// Judging system progHours
enum ContestStatus {
  Upcoming
  Running
  Finished
  Judging
}
enum ContestMode {
  Invitation
  Temporary
  Private
  Public
}
enum StandingsMode {
  SimpleMode
  PenaltyMode
}
enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
}
enum checkerType {
  String
  Float
  Int
  YesNo
  Custom
}
enum testType {
  Sample
  Regular
  Additional
}
enum problemStatus {
  Locked
  Free
  Published
}
enum judgeLanguage {
  CPP17
  CPP20
  Python
  Java
  Rust
}
model JudgeContests {
  id Int  @id @default(autoincrement())
  authors User[] // many to many
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startDateTime DateTime
  duration DateTime
  currentStatus ContestStatus @default(Upcoming)
  contestMode ContestMode @default(Private)
  standingsMode StandingsMode @default(PenaltyMode)
  penalty Int @default(20) // default 20 points
  contestPassword String?

  problems JudgeProblems[]

  @@index([id])
}
model Category {
  id Int @id @default(autoincrement())
  title String @unique
  subCategory SubCategory[]

  @@index([id, title])
}
model SubCategory {
  id Int @id @default(autoincrement())
  title String @unique
  category Category @relation(fields: [categoryTitle], references: [title])
  categoryTitle String
  problems JudgeProblems[]

  @@index([id])
}
model JudgeProblems {
  id    Int     @id @default(autoincrement())
  title String
  author User  @relation(fields: [authorName], references: [username])
  authorName String // only one author

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cpuLimit  Float @default(1000) // int milisecond
  memoryLimit Int @default(256000) // in KB
  problemStatement String?
  inputStatement  String?
  outputStatement String?
  noteStatement String?
  inOutBaseFolder String
  totalInOutFiles Int @default(0) 
  isVisible Boolean @default(true) // statement visiblility during contest
  difficulty ProblemDifficulty?
  tags Tag[] // many to many

  checkerType checkerType @default(String)
  fold Boolean @default(false)
  strictSpace Boolean @default(false)
  absolute Boolean @default(false)
  checkerPrecision Float @default(0.0001)
  checkerCustomCode String?
  type testType @default(Regular)

  isPublishable Boolean @default(false)
  currentStatus problemStatus @default(Free)

  contest JudgeContests? @relation(fields: [contestId], references: [id])
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id])
  contestId Int?
  subCategoryId Int?
  editorial String?

  submissions JudgeSubmissions[]
  tests JudgeProblemTests[]
  
  @@index([id])
}
model JudgeProblemTests {
  id  Int   @id @default(autoincrement())
  weight Int @default(1)
  label String?
  type testType @default(Regular)
  testFolder String // stores the prefix of the path
  problem JudgeProblems @relation(fields: [problemId], references: [id])
  problemId Int

  @@index([weight])
}

model JudgeProblemSolutions {
  id  Int @id @default(autoincrement())
  label String?
  language judgeLanguage @default(CPP17)
  sourceCode String?
  isPrivate Boolean @default(true)
  solutionAuthor User @relation(fields: [author], references: [username])
  author String

  @@index([id])
}

model JudgeSubmissions {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userName], references: [username])
  userName String
  problem JudgeProblems @relation(fields: [problemId], references: [id])
  problemId Int

  sourceCode String
  verdict Verdict
  cpuTime Float
  memorySize Int

  @@index([id])
}

